{"title":"TypeScript入门指北（二）","date":"2019-08-16T01:58:14.000Z","date_formatted":{"ll":"Aug 16, 2019","L":"08/16/2019","MM-DD":"08-16"},"link":"2019/08/16/TypeScript入门指北（二）","tags":["TypeScript","前端"],"updated":"2020-07-31T02:03:41.967Z","content":"<blockquote>\n<p>上篇文章我们提到了为什么要学 <code>TypeScript</code>， 以及通过 <code>TypeScript</code> 跟 <code>JavaScript</code> 的简单对比，熟悉了 <code>TypeScript</code> 一些较为基础的语法。</p>\n</blockquote>\n<p>学过面向对象的同学都知道，面向对象的三个基本要素就是：</p>\n<ul>\n<li><strong>封装</strong></li>\n<li><strong>继承</strong></li>\n<li><strong>多态</strong></li>\n</ul>\n<p>在 <code>TypeScript</code> 中，这几种语法都与之有密切的联系：</p>\n<ul>\n<li><strong>函数</strong></li>\n<li><strong>接口</strong></li>\n<li><strong>类</strong></li>\n<li><strong>泛型</strong></li>\n</ul>\n<p>当然，<strong>函数</strong> 和 <strong>接口</strong> 在<a href=\"https://juejin.im/post/6844903913343172616\" target=\"_blank\">上篇文章</a>已经讲过了，这篇文章着重讲一下<strong>类</strong>。</p>\n<h3 id=\"类\">类<a title=\"#类\" href=\"#类\"></a></h3>\n<p>在面向对象编程(<code>OOP</code>)中，类是对对象的一个高度的抽象。打个比方，女朋友可以看成一个<strong>对象</strong>，因为女朋友是具体的一个人；而女人/人则可以看成一个类，因为它是泛指的。<br>\n<img src=\"https://user-gold-cdn.xitu.io/2019/8/15/16c95bc844664525?w=501&amp;h=406&amp;f=png&amp;s=22955\" alt=\"\"></p>\n<p>根据这个关系，我们可以用 <code>TypeScript</code> 来定义一个 <code>Woman</code> 类并且 <code>new</code> 一个<strong>对象</strong>（女朋友）出来：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Woman &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> girlFriend = <span class=\"keyword\">new</span> Woman()</span><br></pre></td></tr></table></figure>\n<p>可以看到，这个<strong>对象</strong>什么都没有，接下来我们给她添加点属性上去，让她变得更立体一些。</p>\n<h4 id=\"属性\">属性<a title=\"#属性\" href=\"#属性\"></a></h4>\n<p>属性包含：</p>\n<ul>\n<li><strong>私有属性</strong>（<code>private</code>）: 属性被声明为 <code>private</code>（私有）之后，不能在类之外的地方访问。</li>\n<li><strong>公有属性</strong>（<code>public</code>）：如果不标记，则属性默认被声明为 <code>public</code>（公有）。</li>\n<li><strong>保护属性</strong>（<code>protected</code>）：属性被声明为 <code>protected</code>（保护）之后，不能再类之外的地方访问，但是可以在派生类中访问，也就是说在它的子类中可以访问这个属性。</li>\n<li><strong>静态属性</strong>（<code>static</code>)：属性被声明为 <code>static</code>（静态），此时该属性属于<strong>类</strong>而不属于<strong>类</strong>的实例或者<strong>子类</strong>，相应的需要在属性前加上<strong>类名</strong>才能访问。</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/8/16/16c961b24af67323?w=827&amp;h=782&amp;f=png&amp;s=49956\" alt=\"\" class=\"φcx\"></p>\n<p>我们简单拓展下上面那段代码，给 <code>Woman</code> 类添加几个属性：</p>\n<ul>\n<li>姓名</li>\n<li>身高</li>\n<li>年龄</li>\n<li>…</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Woman &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> height: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> age: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在拓展这个类的时候我们发现，其实 <code>Woman</code> 类还能够再抽象成 <strong>人类</strong>（<code>Person</code>)，而这就涉及到了继承。</p>\n<h4 id=\"继承\">继承<a title=\"#继承\" href=\"#继承\"></a></h4>\n<p>我们定义一个 <code>Person</code> 类，并让 <code>Woman</code> 继承 <code>Person</code>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Person &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> height: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> age: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> (<span class=\"params\">name: <span class=\"built_in\">string</span>, height: <span class=\"built_in\">number</span>, age: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.height = height</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 子类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Woman <span class=\"keyword\">extends</span> Person &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, height: <span class=\"built_in\">number</span>, age: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name, height, age)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> girlFriend = <span class=\"keyword\">new</span> Woman(<span class=\"string\">'girl'</span>, <span class=\"number\">180</span>, <span class=\"number\">18</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"抽象类和抽象方法\">抽象类和抽象方法<a title=\"#抽象类和抽象方法\" href=\"#抽象类和抽象方法\"></a></h4>\n<p><strong>抽象类</strong> 和 <strong>抽象方法</strong> 的定义方式都是在前边加一个 <code>abstract</code> 关键字，不同的是，<strong>抽象类</strong> 可以包含具体的属性和函数实现，但是 <strong>抽象函数</strong> 则必须在子类中实现。换言之，<strong>抽象类</strong> 可以拥有自己的独立行为，但是 <strong>抽象函数</strong> 则跟 <strong>接口</strong>（<code>interface</code>）类似，不包括具体的实现。</p>\n<p>因此，上面的例子我们可以再进行拓展，将 <code>Person</code> 定义成一个抽象类，再让 <code>Woman</code> 继承它</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父类</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Person &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> height: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> age: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> (<span class=\"params\">name: <span class=\"built_in\">string</span>, height: <span class=\"built_in\">number</span>, age: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.height = height</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> moYu (): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    walk (): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'walk'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 子类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Woman <span class=\"keyword\">extends</span> Person &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, height: <span class=\"built_in\">number</span>, age: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name, height, age)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    moYu () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'今天你摸鱼了吗？'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> girlFriend = <span class=\"keyword\">new</span> Woman(<span class=\"string\">'girl'</span>, <span class=\"number\">180</span>, <span class=\"number\">18</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/8/16/16c961f3181f6ce9?w=706&amp;h=577&amp;f=png&amp;s=29858\" alt=\"\"><br>\n这里 <code>Person</code> 的属性是否定义，取决于 <code>Person</code> 中是否存在非抽象函数，否则没有必要写。</p>\n<p>系列文章：</p>\n<ul>\n<li><a href=\"https://juejin.im/post/6844903913343172616\" target=\"_blank\">TypeScript 入门指北（一）</a></li>\n</ul>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://www.tslang.cn/docs/home.html\" target=\"_blank\">TypeScript 中文文档</a></li>\n</ul>\n<p>练习地址：<a href=\"https://www.tslang.cn/play/index.html\" target=\"_blank\" rel=\"noopener\">https://www.tslang.cn/play/index.html</a></p>\n","prev":{"title":"Vue 源码分析 —— 深入理解 keep-alive 组件","link":"2020/05/17/Vue源码分析——深入理解keep-alive组件"},"next":{"title":"TypeScript入门指北（一）","link":"2019/08/14/TypeScript入门指北（一）"},"plink":"https://pigpigever.github.io/2019/08/16/TypeScript入门指北（二）/","toc":[{"id":"类","title":"类","index":"1"}]}