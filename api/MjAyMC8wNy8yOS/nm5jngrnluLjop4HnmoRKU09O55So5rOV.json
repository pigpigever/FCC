{"title":"盘点常见的JSON用法","date":"2020-07-29T12:59:25.000Z","date_formatted":{"ll":"Jul 29, 2020","L":"07/29/2020","MM-DD":"07-29"},"thumbnail":"/images/thumbnail/4.jpg","link":"2020/07/29/盘点常见的JSON用法","comments":true,"tags":["JSON","JavaScript","前端"],"updated":"2020-08-10T15:19:07.785Z","content":"<h2 id=\"json-是什么？\">JSON 是什么？<a title=\"#json-是什么？\" href=\"#json-是什么？\"></a></h2>\n<p>JSON 是一种语法，可以用来序列化对象、数组或者数字等数据类型。换句话说，我们可以利用 JSON 来将数据转成字符串的形式。</p>\n<h2 id=\"常见的-api\">常见的 API<a title=\"#常见的-api\" href=\"#常见的-api\"></a></h2>\n<h3 id=\"json.parse\">JSON.parse<a title=\"#json.parse\" href=\"#json.parse\"></a></h3>\n<ul>\n<li>\n<p>功能</p>\n<p>还原被序列化的数据（反序列化），即将字符串还原为它本来的数据结构。</p>\n</li>\n<li>\n<p>参数</p>\n<ul>\n<li><code>text</code>，即将要被「反序列化」的字符串</li>\n<li><code>reviver</code>，处理字符串的回调函数，可以参与到「反序列化」的过程，遍历顺序是由内到外</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"json.stringify\">JSON.stringify<a title=\"#json.stringify\" href=\"#json.stringify\"></a></h3>\n<ul>\n<li>\n<p>功能</p>\n<p>序列化一个值，即将一个值转为字符串的形式。</p>\n</li>\n<li>\n<p>参数</p>\n<ul>\n<li><code>value</code>，将要被序列化的值</li>\n<li><code>replacer</code>\n<ol>\n<li>如果该值是函数，那么它会参与到序列化的过程当中</li>\n<li>如果该值是数组，那么只有包含在数组里的属性才会被序列化</li>\n<li>如果该值是 null 或者 undefined，那么所有属性都会被序列化</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"使用场景\">使用场景<a title=\"#使用场景\" href=\"#使用场景\"></a></h2>\n<h3 id=\"本地缓存\">本地缓存<a title=\"#本地缓存\" href=\"#本地缓存\"></a></h3>\n<p>经常使用的本地缓存如 <code>localStorage</code>，对于存入的数据是有要求的：键名和值都只能是 <code>string</code> 类型。<br>\n而这时 <code>JSON</code> 就可以派上用场了👇</p>\n<ul>\n<li>存储</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localStorage.set(key, <span class=\"built_in\">JSON</span>.stringify(data))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>提取</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localStorage.getItem(key, <span class=\"built_in\">JSON</span>.parse(str))</span><br></pre></td></tr></table></figure>\n<h4 id=\"处理-date-对象\">处理 Date 对象<a title=\"#处理-date-对象\" href=\"#处理-date-对象\"></a></h4>\n<p>如果对象里有 <code>Date</code> 对象，那么序列化之后结果是这样的👇</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"2020-07-29T14:47:09.608Z\"</span></span><br></pre></td></tr></table></figure>\n<p>这时候就头疼了，我们需要再写一个函数来处理反序列化之后的结果吗？<br>\n<img src=\"/images/JSON/1.jpeg\" alt=\"\"></p>\n<p>别忘了上面提到的参数，无论是 <code>parse</code> 还是 <code>stringify</code> 都允许传入一个参数来控制序列化/反序列化，因此我们可以这样来处理 <code>Date</code> 的对象👇</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    text: <span class=\"string\">'just do it'</span>,</span><br><span class=\"line\">    date: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"built_in\">JSON</span>.stringify(obj)</span><br><span class=\"line\"><span class=\"keyword\">let</span> org = <span class=\"built_in\">JSON</span>.parse(str, (key, val) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果是 date 就转成 Date</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key === <span class=\"string\">'date'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(val)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"处理-regexp-对象\">处理 RegExp 对象<a title=\"#处理-regexp-对象\" href=\"#处理-regexp-对象\"></a></h4>\n<p>现在场景更加复杂了，你需要处理 <code>RegExp</code> 对象了，这时候要怎么做呢？手快的同学可能就直接开动了👇</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    reg: <span class=\"regexp\">/\\d+/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"built_in\">JSON</span>.stringify(obj)</span><br><span class=\"line\"><span class=\"keyword\">let</span> org = <span class=\"built_in\">JSON</span>.parse(str)</span><br></pre></td></tr></table></figure>\n<p>实际上，直接序列化一个 <code>RegExp</code> 对象只会返回一个 <code>&quot;{}&quot;</code>（不信你试试）<br>\n<img src=\"/images/JSON/2.jpg\" alt=\"\"></p>\n<p>别忘了，<code>RegExp</code>  构造函数可以传入这两个参数：</p>\n<ul>\n<li><code>source</code></li>\n<li><code>flags</code></li>\n</ul>\n<p>因此我们只要对包含 <code>RegExp</code> 对象的属性在序列化与反序列化时做特别处理即可👇</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 序列化 RegExp 对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">reg</span>: <span class=\"regexp\">/\\d+/</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"built_in\">JSON</span>.stringify(obj, (key, val) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key === <span class=\"string\">'reg'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            source: val.source,</span><br><span class=\"line\">            flags: val.flags</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 反序列化</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> org = <span class=\"built_in\">JSON</span>.stringify(str, (key, val) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key === <span class=\"string\">'reg'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(val.source, val.flags)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"判断对象是否为空\">判断对象是否为空<a title=\"#判断对象是否为空\" href=\"#判断对象是否为空\"></a></h3>\n<p>我们也可以利用 <code>JSON.stringify</code> 来判断某个对象是否为空（没有任何属性）👇</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isObjectEmpty = <span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify(obj) === <span class=\"string\">'&#123;&#125;'</span> &amp;&amp; !obj.__proto__</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h2>\n<p><img src=\"/images/JSON/3.svg\" alt=\"\" class=\"φcx\"></p>\n","prev":{"title":"1502.判断能否形成等差数列","link":"2020/07/30/1502-判断能否形成等差数列"},"next":{"title":"49.字母异位词分组","link":"2020/07/29/49-字母异位词分组"},"plink":"https://pigpigever.github.io/2020/07/29/盘点常见的JSON用法/","toc":[{"id":"json-是什么？","title":"JSON 是什么？","index":"1"},{"id":"常见的-api","title":"常见的 API","index":"2","children":[{"id":"json.parse","title":"JSON.parse","index":"2.1"},{"id":"json.stringify","title":"JSON.stringify","index":"2.2"}]},{"id":"使用场景","title":"使用场景","index":"3","children":[{"id":"本地缓存","title":"本地缓存","index":"3.1"},{"id":"判断对象是否为空","title":"判断对象是否为空","index":"3.2"}]},{"id":"总结","title":"总结","index":"4"}],"copyright":{"author":"Tonychen","link":"<a href=\"https://pigpigever.github.io/2020/07/29/盘点常见的JSON用法/\" title=\"盘点常见的JSON用法\">https://pigpigever.github.io/2020/07/29/盘点常见的JSON用法/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}