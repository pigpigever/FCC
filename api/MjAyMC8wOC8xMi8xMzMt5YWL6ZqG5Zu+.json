{"title":"133.克隆图","date":"2020-08-12T12:19:07.000Z","date_formatted":{"ll":"Aug 12, 2020","L":"08/12/2020","MM-DD":"08-12"},"thumbnail":"/images/thumbnail/7.jpg","link":"2020/08/12/133-克隆图","comments":true,"tags":["LeetCode","图","深度优先搜索","算法"],"updated":"2020-08-12T12:21:59.629Z","content":"<h2 id=\"题目\">题目<a title=\"#题目\" href=\"#题目\"></a></h2>\n<p>给你无向 连通 图中一个节点的引用，请你返回该图的 深拷贝（克隆）。</p>\n<p>图中的每个节点都包含它的值 <code>val（int）</code> 和其邻居的列表（<code>list[Node]</code>）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Node &#123;</span><br><span class=\"line\">    public int val;</span><br><span class=\"line\">    public List&lt;Node&gt; neighbors;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试用例格式：</p>\n<p>简单起见，每个节点的值都和它的索引相同。例如，第一个节点值为 1（<code>val = 1</code>），第二个节点值为 2（<code>val = 2</code>），以此类推。该图在测试用例中使用邻接列表表示。</p>\n<p>邻接列表 是用于表示有限图的无序列表的集合。每个列表都描述了图中节点的邻居集。</p>\n<p>给定节点将始终是图中的第一个节点（值为 1）。你必须将 给定节点的拷贝 作为对克隆图的引用返回。</p>\n<h2 id=\"解题思路\">解题思路<a title=\"#解题思路\" href=\"#解题思路\"></a></h2>\n<p>这道题其实就是搜索，然后根据节点值新建节点，但是要注意的是需要记录节点是否被访问过，否则会爆栈。</p>\n<h2 id=\"代码\">代码<a title=\"#代码\" href=\"#代码\"></a></h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Node&#125;</span> <span class=\"variable\">node</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;Node&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cloneGraph = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> helper = <span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!node) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.has(node)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> map.get(node)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; val, neighbors &#125; = node</span><br><span class=\"line\">        <span class=\"keyword\">const</span> root = <span class=\"keyword\">new</span> Node(val)</span><br><span class=\"line\">        map.set(node, root)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; neighbors.length; i++) &#123;</span><br><span class=\"line\">            root.neighbors[i] = helper(neighbors[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(node)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","next":{"title":"剑指 Offer 04. 二维数组中的查找","link":"2020/08/10/剑指Offer04-二维数组中的查找"},"plink":"https://pigpigever.github.io/2020/08/12/133-克隆图/","toc":[{"id":"题目","title":"题目","index":"1"},{"id":"解题思路","title":"解题思路","index":"2"},{"id":"代码","title":"代码","index":"3"}],"copyright":{"author":"Tonychen","link":"<a href=\"https://pigpigever.github.io/2020/08/12/133-克隆图/\" title=\"133.克隆图\">https://pigpigever.github.io/2020/08/12/133-克隆图/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}