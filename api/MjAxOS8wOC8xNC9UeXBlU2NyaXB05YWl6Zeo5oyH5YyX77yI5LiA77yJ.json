{"title":"TypeScript入门指北（一）","date":"2019-08-14T01:55:38.000Z","date_formatted":{"ll":"Aug 14, 2019","L":"08/14/2019","MM-DD":"08-14"},"thumbnail":"/images/thumbnail/6.jpg","link":"2019/08/14/TypeScript入门指北（一）","comments":true,"tags":["TypeScript","前端"],"updated":"2020-08-10T15:16:15.297Z","content":"<h2 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h2>\n<p>随着前端在各种类型的项目中扮演的角色越来越重要，人们发现 <code>JavaScript</code> 这门弱类型语言已经不能满足当下的需求，尤其是在一些<strong>大中型</strong>项目中，<code>JavaScript</code> 远远没有一些强类型语言用得顺手，而 <code>TypeScript</code> 因此诞生。</p>\n<h2 id=\"typescript-是什么？\">TypeScript 是什么？<a title=\"#typescript-是什么？\" href=\"#typescript-是什么？\"></a></h2>\n<p>简单来讲，<code>TypeScript</code> 是 <code>JavaScript</code> 的超集，它可以编译成纯 <code>JavaScript</code>。</p>\n<h2 id=\"基础语法\">基础语法<a title=\"#基础语法\" href=\"#基础语法\"></a></h2>\n<h3 id=\"基础类型\">基础类型<a title=\"#基础类型\" href=\"#基础类型\"></a></h3>\n<p>由于 <code>TypeScript</code> 是在 <code>JavaScript</code> 的基础上定义的，所以基础类型其实也是大同小异，这里仅列出来和 <code>JavaScript</code> 做一个对比。</p>\n<ul>\n<li><strong>布尔值</strong><br>\n声明方式：<code>let a: boolean = true</code><br>\n对比：<code>JavaScript</code> 中也存在布尔值类型。</li>\n<li><strong>数字</strong><br>\n声明方式：<code>let a: number = 2</code><br>\n对比：<code>JavaScript</code> 中也存在数字类型。</li>\n<li><strong>字符串</strong><br>\n声明方式：<code>let a: string = '233'</code><br>\n对比：<code>JavaScript</code> 中也存在字符串类型。</li>\n<li><strong>数组</strong><br>\n声明方式：<code>let a: number[] = [1,2,3]</code><br>\n对比：<code>JavaScript</code> 中也存在数组类型。</li>\n<li><strong>元组 Tuple</strong><br>\n声明方式：<code>let a: [number, string]</code><br>\n对比：<code>JavaScript</code> 中不存在这种类型。<br>\n说明：定义一个元组，相当于定义一个规定类型的数组；比如上面的变量 <code>a</code> ，前两个元素只能对应 <code>number</code> 类型和 <code>string</code> 类型，而之后的元素的类型也只能是 <code>number</code> 和 <code>string</code> 中的一种。</li>\n<li><strong>枚举</strong><br>\n声明方式：<code>enum animal = {cat, dog, duck}</code>，<code>let a: animal = animal.cat</code>，跟其他语言一样，如果不赋值的话，枚举值从 <code>0</code> 到 <code>n</code>，当然也可以选择手动赋值。<br>\n对比：<code>JavaScript</code> 中不存在这种类型，不过枚举也可以简单的用声明常量的方式来代替。</li>\n<li><strong>Any</strong><br>\n声明方式：<code>let a: any = '2333'</code><br>\n对比：<code>JavaScript</code> 中不存在这种类型。<br>\n说明：声明一个 <code>any</code> 类型的变量，通常它表示所有类型的变量。</li>\n<li><strong>Void</strong><br>\n声明方式：<code>let gg: void = undefined</code><br>\n对比：<code>JavaScript</code> 中存在 <code>void</code>，但它不是变量类型，而是一个操作符</li>\n<li><strong>Null</strong><br>\n声明方式：<code>let a: null = null</code><br>\n对比：<code>JavaScript</code> 中存在 <code>Null</code> 类型。<br>\n说明：<code>Null</code> 类型可以看成其他类型的子类型，也就是说 <code>Null</code> 类型的变量也可以赋值给其他类型的变量并且不会报错。</li>\n<li><strong>Undefined</strong><br>\n声明方式：<code>let a: undefined = undefined</code><br>\n对比：<code>JavaScript</code> 中存在 <code>Undefined</code> 类型。<br>\n说明：<code>Undefined</code> 类型同上面所说的 <code>Null</code> 一样，也是其他类型的子类型。</li>\n<li><strong>Never</strong><br>\n声明方式：无法声明，因为其他类型的变量不能给 <code>never</code> 类型的变量赋值。<code>never</code> 类型只能从函数返回值中获取。<br>\n对比：<code>JavaScript</code> 中不存在 <code>never</code> 类型。<br>\n说明：<code>never</code> 类型表示的是那些永不存在的值的类型。</li>\n<li><strong>Object</strong><br>\n声明方式：<code>let a: object = {}</code><br>\n对比：<code>JavaScript</code> 中存在 <code>object</code> 类型</li>\n</ul>\n<h3 id=\"接口\">接口<a title=\"#接口\" href=\"#接口\"></a></h3>\n<blockquote>\n<p><code>TypeScript</code> 的核心原则之一是对值所具有的结构进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。 在 <code>TypeScript</code> 里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</p>\n</blockquote>\n<p>简单来说，接口（interface）存在的意义是为了对复杂类型（object）的存在进行约束。<br>\n比方说有一个对象 <strong>person</strong>，它有以下这些属性：</p>\n<ul>\n<li>姓名</li>\n<li>身高</li>\n<li>体重</li>\n<li>…</li>\n<li></li>\n</ul>\n<p>由于 <strong>person</strong> 是一个复杂的对象，使用接口（interface）则可以对它进行一个严格的约束。比如：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Person &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">    height: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">    weight: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"可选属性\">可选属性<a title=\"#可选属性\" href=\"#可选属性\"></a></h4>\n<blockquote>\n<p>接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。 可选属性在应用“option bags”模式时很常用，即给函数传入的参数对象中只有部分属性赋值了。</p>\n</blockquote>\n<p><strong>可选属性</strong> 的存在其实跟你有没有男/女朋友的关系是一样的，有固然好，没有也不会怎么样。不过你要是男女通吃那我也拿你没办法…<br>\n以此为例子，我们拓展下上面的代码：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Person &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">    height: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">    weight: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">    girlFriend?: object,</span><br><span class=\"line\">    boyFriend?: object</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"只读属性\">只读属性<a title=\"#只读属性\" href=\"#只读属性\"></a></h4>\n<blockquote>\n<p>如果有些属性只想赋值一次，那么只读属性就可以派上用场。</p>\n</blockquote>\n<p>比方说我们的身高，在一定年龄后就不会再长，那么其实也可以把它近似的看成一个只读属性。</p>\n<p>因此我们上面的代码也可以这样写。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Person &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">    readonly height: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">    weight: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">    girlFriend?: object,</span><br><span class=\"line\">    boyFriend?: object</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数\">函数<a title=\"#函数\" href=\"#函数\"></a></h3>\n<blockquote>\n<p>和 <code>JavaScript</code> 一样，<code>TypeScript</code> 函数可以创建有名字的函数和匿名函数。 你可以随意选择适合应用程序的方式，不论是定义一系列 <code>API</code> 函数还是只使用一次的函数。</p>\n</blockquote>\n<p><code>TypeScript</code> 中的函数跟 <code>JavaScript</code> 在书写方式上区别并不算很大，比如说定义一个 <code>add</code> 函数：<br>\n使用 <code>JavaScript</code> 是这样写的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>TypeScript</code> 是这样写的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a: <span class=\"built_in\">number</span>, b: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么 <code>TypeScript</code> 的函数就没点其他的功能了吗？其实还是有的。</p>\n<h5 id=\"可选参数和默认参数\">可选参数和默认参数<a title=\"#可选参数和默认参数\" href=\"#可选参数和默认参数\"></a></h5>\n<ul>\n<li><strong>可选参数</strong>：函数的参数可选</li>\n<li><strong>默认参数</strong>：函数的参数设置默认值</li>\n</ul>\n<p><strong>可选参数</strong>的写法：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a: <span class=\"built_in\">number</span>, b: <span class=\"built_in\">string</span>, c?: <span class=\"built_in\">boolean</span></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a,b,c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(<span class=\"number\">1</span>,<span class=\"string\">'233'</span>) <span class=\"comment\">// 1, '233', undefined</span></span><br></pre></td></tr></table></figure>\n<p>设置了一个<strong>可选参数</strong>，如果不传值，那么它默认就是 <code>undefined</code></p>\n<p><strong>默认参数</strong>的写法：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a: <span class=\"built_in\">number</span>, b: <span class=\"built_in\">string</span>, c = <span class=\"literal\">false</span></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a, b, c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(<span class=\"number\">1</span>,<span class=\"string\">'gg'</span>) <span class=\"comment\">// 1, 'gg', false</span></span><br></pre></td></tr></table></figure>\n<p>这里的<strong>默认参数</strong>跟 <code>JavaScript</code> 中的写法是等价的。</p>\n<h4 id=\"重载\">重载<a title=\"#重载\" href=\"#重载\"></a></h4>\n<blockquote>\n<p>函数重载意味着允许存在相同函数名，但是参数类型、个数、返回值其中的一个或多个不相同的函数。</p>\n</blockquote>\n<p>当然，我们来看个简单的例子会更加清晰明了。比如说你的老大让你写一个 <code>swap</code> 函数，相信在座的各位前端er都能写出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr, i, j</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = arr[i]</span><br><span class=\"line\">    arr[i] = arr[j]</span><br><span class=\"line\">    arr[j] = tmp</span><br><span class=\"line\">    <span class=\"comment\">// [arr[i], arr[j]] = [arr[j], arr[i]] 利用解构也可以这样写</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果用 <code>TypeScript</code> 那就要指定参数 <code>arr</code> 的类型了，如果指定了 <code>number[]</code> 或者 <code>string[]</code> 之类的，那么未免太死板了；但是如果指定了 <code>any</code> 类型，那又没办法约束参数。而函数重载在这个时候就发挥了它的作用：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr: <span class=\"built_in\">number</span>[], i: <span class=\"built_in\">number</span>, j: <span class=\"built_in\">number</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr: <span class=\"built_in\">string</span>[], i: <span class=\"built_in\">number</span>, j: <span class=\"built_in\">number</span></span>)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"function\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr, i, j</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"function\">    [<span class=\"title\">arr</span>[<span class=\"title\">i</span>], <span class=\"title\">arr</span>[<span class=\"title\">j</span>]] = [<span class=\"title\">arr</span>[<span class=\"title\">j</span>], <span class=\"title\">arr</span>[<span class=\"title\">i</span>]]</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"function\">&#125;</span></span></span><br></pre></td></tr></table></figure>\n<p>练习地址：<a href=\"https://www.tslang.cn/play/index.html\" target=\"_blank\" rel=\"noopener\">https://www.tslang.cn/play/index.html</a></p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://www.tslang.cn/docs/home.html\" target=\"_blank\">TypeScript 中文文档</a></li>\n</ul>\n","prev":{"title":"TypeScript入门指北（二）","link":"2019/08/16/TypeScript入门指北（二）"},"plink":"https://pigpigever.github.io/2019/08/14/TypeScript入门指北（一）/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"typescript-是什么？","title":"TypeScript 是什么？","index":"2"},{"id":"基础语法","title":"基础语法","index":"3","children":[{"id":"基础类型","title":"基础类型","index":"3.1"},{"id":"接口","title":"接口","index":"3.2"},{"id":"函数","title":"函数","index":"3.3"}]}],"copyright":{"author":"Tonychen","link":"<a href=\"https://pigpigever.github.io/2019/08/14/TypeScript入门指北（一）/\" title=\"TypeScript入门指北（一）\">https://pigpigever.github.io/2019/08/14/TypeScript入门指北（一）/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}