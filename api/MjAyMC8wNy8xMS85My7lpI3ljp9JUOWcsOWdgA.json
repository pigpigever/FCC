{"title":"93. 复原 IP 地址","date":"2020-07-10T16:00:00.000Z","date_formatted":{"ll":"Jul 11, 2020","L":"07/11/2020","MM-DD":"07-11"},"thumbnail":"/images/thumbnail/7.jpg","link":"2020/07/11/93.复原IP地址","comments":true,"tags":["LeetCode","回溯算法","算法"],"categories":["LeetCode"],"updated":"2020-08-10T13:37:54.969Z","content":"<h3 id=\"解题思路\">解题思路<a title=\"#解题思路\" href=\"#解题思路\"></a></h3>\n<p>这道题咋一看很难，实际上题目里给出的条件已经足够用回溯来找到结果。</p>\n<p>关键：有效的 IP 地址正好由四个整数（每个整数位于 0 到 255 之间组成。</p>\n<p>因此:</p>\n<ol>\n<li>题目中输入的字符串长度至少为 $O(n)$，，至多为 $12$。</li>\n<li>每个整数一定在 $[0, 255]$ 之间。</li>\n<li>只能分割成四个整数，多了或者少了都不是正确的 IP 地址。</li>\n<li>分割的是字符串，需要考虑前导零的存在</li>\n</ol>\n<p>首先我们必须提供一个函数来判断整数的正确性，至于长度限制的判断，一开始执行的时候判断一次就行了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断整数的正确性</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">val</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span> </span><br><span class=\"line\"><span class=\"keyword\">const</span> isValid = <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 别忘记了判断前导零</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val &lt; <span class=\"number\">0</span> || val &gt; <span class=\"number\">255</span> || (val[<span class=\"number\">0</span>] == <span class=\"number\">0</span> &amp;&amp; val.length &gt; <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其次需要限制分割的次数，最多只能分割四次，多了或者少了都不行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> restoreIpAddresses = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 回溯函数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">cnt</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">currStr</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">restStr</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span> </span><br><span class=\"line\">    <span class=\"keyword\">const</span> helper = <span class=\"function\">(<span class=\"params\">cnt, currStr, restStr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cnt &gt;= MAX_CNT) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果刚好四个就存进去</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!restStr &amp;&amp; cnt === MAX_CNT) &#123;</span><br><span class=\"line\">                res.push(currStr)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整代码\">完整代码<a title=\"#完整代码\" href=\"#完整代码\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> restoreIpAddresses = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断整数的正确性</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">val</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span> </span><br><span class=\"line\">    <span class=\"keyword\">const</span> isValid = <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val &lt; <span class=\"number\">0</span> || val &gt; <span class=\"number\">255</span> || (val[<span class=\"number\">0</span>] == <span class=\"number\">0</span> &amp;&amp; val.length &gt; <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 回溯函数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">cnt</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">currStr</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">restStr</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span> </span><br><span class=\"line\">    <span class=\"keyword\">const</span> helper = <span class=\"function\">(<span class=\"params\">cnt, currStr, restStr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cnt &gt;= MAX_CNT) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果刚好四个就存进去</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!restStr &amp;&amp; cnt === MAX_CNT) &#123;</span><br><span class=\"line\">                res.push(currStr)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; MAX_CNT; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> curr = restStr.slice(<span class=\"number\">0</span>, i)</span><br><span class=\"line\">            <span class=\"comment\">// 切分的整数格式不对或者切分的时候超过 restStr 的长度</span></span><br><span class=\"line\">            <span class=\"comment\">// 那么就结束递归吧，没有必要再走下去</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isValid(curr) || i &gt; restStr.length) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            helper(cnt + <span class=\"number\">1</span>, currStr ? <span class=\"string\">`<span class=\"subst\">$&#123;currStr&#125;</span>.<span class=\"subst\">$&#123;curr&#125;</span>`</span> : curr, restStr.slice(i))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length &lt; <span class=\"number\">4</span> || s.length &gt; <span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = []</span><br><span class=\"line\">    <span class=\"keyword\">const</span> MAX_CNT = <span class=\"number\">4</span></span><br><span class=\"line\">    helper(<span class=\"number\">0</span>, <span class=\"string\">''</span>, s)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"盘点那些常见的 JS 数组方法及 Polyfill","link":"2020/07/11/一文盘点那些常见的JS数组方法及Polyfill"},"next":{"title":"Vue 源码分析 —— 深入理解 keep-alive 组件","link":"2020/05/17/Vue源码分析——深入理解keep-alive组件"},"plink":"https://pigpigever.github.io/2020/07/11/93.复原IP地址/","toc":[{"id":"解题思路","title":"解题思路","index":"1"},{"id":"完整代码","title":"完整代码","index":"2"}]}