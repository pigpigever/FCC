{"title":"盘点那些常见的 JS 数组方法及 Polyfill","date":"2020-07-10T16:00:00.000Z","date_formatted":{"ll":"Jul 11, 2020","L":"07/11/2020","MM-DD":"07-11"},"thumbnail":"/images/thumbnail/JS-API.jpeg","link":"2020/07/11/一文盘点那些常见的JS数组方法及Polyfill","comments":true,"updated":"2020-08-10T15:18:52.957Z","content":"<h2 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h2>\n<p>虽然有时候遍历数组只需要 <code>for</code> 循环则足矣，但是如果 API 利用得当，往往能更大程度的提高代码的可读性，减少心智负担～</p>\n<h2 id=\"常见的数组-api\">常见的数组 API<a title=\"#常见的数组-api\" href=\"#常见的数组-api\"></a></h2>\n<h3 id=\"array.prototype.some\">Array.prototype.some<a title=\"#array.prototype.some\" href=\"#array.prototype.some\"></a></h3>\n<h4 id=\"功能\">功能<a title=\"#功能\" href=\"#功能\"></a></h4>\n<p>判断数组中是否至少有一个项通过了预设的条件，结果返回 <code>boolean</code>。</p>\n<h4 id=\"参数\">参数<a title=\"#参数\" href=\"#参数\"></a></h4>\n<ul>\n<li><code>callback</code>：执行的回调函数，用于条件判断。</li>\n<li><code>thisArg</code>：执行函数的 <code>this</code> 指针。</li>\n</ul>\n<h4 id=\"场景\">场景<a title=\"#场景\" href=\"#场景\"></a></h4>\n<p>判断数组 <code>[ 1, 2, 3, 5, 6, 7 ]</code> 中是否存在偶数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span> ]</span><br><span class=\"line\"><span class=\"keyword\">if</span> (target.some(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> a % <span class=\"number\">2</span> === <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something   </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"polyfill\">Polyfill<a title=\"#polyfill\" href=\"#polyfill\"></a></h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.some = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, thisArg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 异常处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Cannot read property of null or undefined.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`<span class=\"subst\">$&#123;fn&#125;</span> must be a function.`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 需要用 Object 包装一次 this</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> O = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = O.length || <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> O) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fn.call(thisArg, O[i], i, O)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"array.prototype.every\">Array.prototype.every<a title=\"#array.prototype.every\" href=\"#array.prototype.every\"></a></h3>\n<h4 id=\"功能-1\">功能<a title=\"#功能-1\" href=\"#功能-1\"></a></h4>\n<p>判断数组中是否全部项都通过了预设的条件，结果返回 <code>boolean</code>。</p>\n<h4 id=\"参数-1\">参数<a title=\"#参数-1\" href=\"#参数-1\"></a></h4>\n<ul>\n<li><code>callback</code>：执行的回调函数，用于条件判断。</li>\n<li><code>thisArg</code>：执行函数的 <code>this</code> 指针。</li>\n</ul>\n<h4 id=\"场景-1\">场景<a title=\"#场景-1\" href=\"#场景-1\"></a></h4>\n<p>判断数组 <code>[ 1, 2, 3, 5, 6, 7 ]</code> 是否每个数都是偶数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span> ]</span><br><span class=\"line\"><span class=\"keyword\">if</span> (target.every(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> num % <span class=\"number\">2</span> === <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"polyfill-1\">Polyfill<a title=\"#polyfill-1\" href=\"#polyfill-1\"></a></h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.every = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, thisArg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 异常处理</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Cannot read property of null or undefined'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`<span class=\"subst\">$&#123;fn&#125;</span> is not a function`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 重新包装一次 this</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> O = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = O.length || <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> O) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!fn.call(thisArg, O[i], i, O)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"array.prototype.slice\">Array.prototype.slice<a title=\"#array.prototype.slice\" href=\"#array.prototype.slice\"></a></h3>\n<h4 id=\"功能-2\">功能<a title=\"#功能-2\" href=\"#功能-2\"></a></h4>\n<p>浅拷贝数组，可以指定开始和结束下标来对数组某段做拷贝。如果不添加任何参数，那么会直接拷贝整个数组。</p>\n<h4 id=\"参数-2\">参数<a title=\"#参数-2\" href=\"#参数-2\"></a></h4>\n<ul>\n<li><code>begin</code>（可选参数）: 从这个下标开始拷贝，如果为负数，则表示从倒数第 <code>begin</code> 开始拷贝。</li>\n<li><code>end</code>（可选参数）: 从这个下标结束拷贝，如果为负数，则表示从倒数第 <code>end</code> 结束拷贝。</li>\n</ul>\n<h4 id=\"场景-2\">场景<a title=\"#场景-2\" href=\"#场景-2\"></a></h4>\n<p>拷贝数组 <code>[ 1, 2, 3, 5, 6, 7 ]</code> 到另外一个数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span> ]</span><br><span class=\"line\"><span class=\"keyword\">const</span> temp = target.slice()</span><br></pre></td></tr></table></figure>\n<h4 id=\"polyfill-2\">Polyfill<a title=\"#polyfill-2\" href=\"#polyfill-2\"></a></h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.slice = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">begin, end</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'cannot read property of null or undefined'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 如果 end 没有传就默认截到数组末尾</span></span><br><span class=\"line\">      end = (<span class=\"keyword\">typeof</span> end !== <span class=\"string\">'undefined'</span>) ? end : <span class=\"keyword\">this</span>.length</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> cloned = []</span><br><span class=\"line\">      <span class=\"keyword\">const</span> len = <span class=\"keyword\">this</span>.length</span><br><span class=\"line\">      <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 处理下 begin 参数</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> start = begin || <span class=\"number\">0</span></span><br><span class=\"line\">      start = (start &gt;= <span class=\"number\">0</span>) ? start : <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, len + start)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> upTo = (<span class=\"keyword\">typeof</span> end == <span class=\"string\">'number'</span>) ? <span class=\"built_in\">Math</span>.min(end, len) : len</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (end &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        upTo = len + end</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"comment\">// 计算 upTo 到 start 之间的差值</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> size = upTo - start</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"comment\">// 如果 size &gt; 0 就计算</span></span><br><span class=\"line\">      <span class=\"comment\">// 再拷贝到 cloned 数组中</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">          cloned[i] = <span class=\"keyword\">this</span>[start + i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> cloned</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"array.prototype.reduce\">Array.prototype.reduce<a title=\"#array.prototype.reduce\" href=\"#array.prototype.reduce\"></a></h3>\n<h4 id=\"功能-3\">功能<a title=\"#功能-3\" href=\"#功能-3\"></a></h4>\n<p>对数组中的每个元素执行一个由您提供的reducer函数，将其结果汇总为单个返回值。</p>\n<h4 id=\"参数-3\">参数<a title=\"#参数-3\" href=\"#参数-3\"></a></h4>\n<ul>\n<li><code>callback</code>\n<ul>\n<li>accumulator</li>\n<li>currValue</li>\n<li>index</li>\n<li>array（调用 <code>reduce</code> 的数组）</li>\n</ul>\n</li>\n<li><code>initValue</code></li>\n</ul>\n<h4 id=\"场景-3\">场景<a title=\"#场景-3\" href=\"#场景-3\"></a></h4>\n<p>计算数组 <code>[ 1, 2, 3, 5, 6, 7 ]</code> 的和。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span> ]</span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = target.reduce(<span class=\"function\">(<span class=\"params\">prev, curr</span>) =&gt;</span> prev + curr)</span><br></pre></td></tr></table></figure>\n<h4 id=\"polyfill-3\">Polyfill<a title=\"#polyfill-3\" href=\"#polyfill-3\"></a></h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.reduce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, initValue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 异常判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Cannot read property of null or undefined'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`<span class=\"subst\">$&#123;fn&#125;</span> must be a function`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> O = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = O.length || <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> k = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> accumulator = initValue</span><br><span class=\"line\">    <span class=\"comment\">// 遍历并拿到结果</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> O) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!accumulator) &#123;</span><br><span class=\"line\">                accumulator = O[i]</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                accumulator = fn.call(<span class=\"keyword\">this</span>, accumulator, O[i], i, O)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            k++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 空数组异常判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k &gt;= len) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Reduce of empty array with no initial value'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accumulator</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"array.prototype.map\">Array.prototype.map<a title=\"#array.prototype.map\" href=\"#array.prototype.map\"></a></h3>\n<h4 id=\"功能-4\">功能<a title=\"#功能-4\" href=\"#功能-4\"></a></h4>\n<p>创建一个新数组，其结果是该数组中的每个元素调用一次提供的函数后的返回值。</p>\n<h4 id=\"参数-4\">参数<a title=\"#参数-4\" href=\"#参数-4\"></a></h4>\n<ul>\n<li><code>callback</code>\n<ul>\n<li><code>currentValue</code></li>\n<li><code>index</code></li>\n<li><code>array</code></li>\n</ul>\n</li>\n<li><code>thisArg</code></li>\n</ul>\n<h4 id=\"场景-4\">场景<a title=\"#场景-4\" href=\"#场景-4\"></a></h4>\n<p>将数组 <code>[ 1, 2, 3, 5, 6, 7 ]</code> 转化成对象数组，格式为 <code>[{val: 1}, ...]</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span> ]</span><br><span class=\"line\"><span class=\"keyword\">const</span> objArr = target.map(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        val: num</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"polyfill-4\">Polyfill<a title=\"#polyfill-4\" href=\"#polyfill-4\"></a></h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.map = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, thisArg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 异常判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Cannot read property of null or undefined.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`<span class=\"subst\">$&#123;fn&#125;</span> is not a function.`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> O = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = O.length || <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = []</span><br><span class=\"line\">    <span class=\"comment\">// 遍历并拿到结果</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> O) &#123;</span><br><span class=\"line\">            res.push(fn.call(thisArg, O[i], i, O))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h2>\n<p>看完上面这些 <code>Polyfill</code> 之后，我们可以找到一些规律，以便遇到没见过的 <code>Polyfill</code> 也能写出个大概：</p>\n<ul>\n<li>对 <code>this</code> 指针和传入的回调函数做异常判断</li>\n<li>对 <code>this</code> 用 <code>Object</code> 重新包装一层</li>\n<li>具体的逻辑处理，每个函数都不太一样</li>\n<li>返回结果</li>\n</ul>\n<h2 id=\"参考资料\">参考资料<a title=\"#参考资料\" href=\"#参考资料\"></a></h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\">MDN</a></li>\n</ul>\n<p>搜索「tony老师的前端补习班」关注我的微信公众号，那么就可以第一时间收到我的最新文章。</p>\n","prev":{"title":"1219. 黄金矿工","link":"2020/07/14/1219.黄金矿工"},"next":{"title":"93. 复原 IP 地址","link":"2020/07/11/93.复原IP地址"},"plink":"https://pigpigever.github.io/2020/07/11/一文盘点那些常见的JS数组方法及Polyfill/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"常见的数组-api","title":"常见的数组 API","index":"2","children":[{"id":"array.prototype.some","title":"Array.prototype.some","index":"2.1"},{"id":"array.prototype.every","title":"Array.prototype.every","index":"2.2"},{"id":"array.prototype.slice","title":"Array.prototype.slice","index":"2.3"},{"id":"array.prototype.reduce","title":"Array.prototype.reduce","index":"2.4"},{"id":"array.prototype.map","title":"Array.prototype.map","index":"2.5"}]},{"id":"总结","title":"总结","index":"3"},{"id":"参考资料","title":"参考资料","index":"4"}],"copyright":{"author":"Tonychen","link":"<a href=\"https://pigpigever.github.io/2020/07/11/一文盘点那些常见的JS数组方法及Polyfill/\" title=\"盘点那些常见的 JS 数组方法及 Polyfill\">https://pigpigever.github.io/2020/07/11/一文盘点那些常见的JS数组方法及Polyfill/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}