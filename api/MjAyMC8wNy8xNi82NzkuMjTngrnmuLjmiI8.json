{"title":"679. 24 点游戏","date":"2020-07-16T15:41:52.000Z","date_formatted":{"ll":"Jul 16, 2020","L":"07/16/2020","MM-DD":"07-16"},"thumbnail":"/images/thumbnail/7.jpg","link":"2020/07/16/679.24点游戏","comments":true,"tags":["LeetCode","回溯算法","算法"],"categories":["LeetCode"],"updated":"2020-08-10T13:38:08.662Z","content":"<p><a href=\"https://leetcode-cn.com/problems/24-game/\" target=\"_blank\">题目来源</a></p>\n<h2 id=\"题目\">题目<a title=\"#题目\" href=\"#题目\"></a></h2>\n<p>你有 4 张写有 1 到 9 数字的牌。你需要判断是否能通过 *，/，+，-，(，) 的运算得到 24。</p>\n<p>示例 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [4, 1, 8, 7]</span><br><span class=\"line\">输出: True</span><br><span class=\"line\">解释: (8-4) * (7-1) &#x3D; 24</span><br></pre></td></tr></table></figure>\n<p>示例 2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1, 2, 1, 2]</span><br><span class=\"line\">输出: False</span><br></pre></td></tr></table></figure>\n<p>注意:</p>\n<ul>\n<li>除法运算符 / 表示实数除法，而不是整数除法。例如 4 / (1 - 2/3) = 12 。</li>\n<li>每个运算符对两个数进行运算。特别是我们不能用 - 作为一元运算符。例如，[1, 1, 1, 1] 作为输入时，表达式 -1 - 1 - 1 - 1 是不允许的。</li>\n<li>你不能将数字连接在一起。例如，输入为 [1, 2, 1, 2] 时，不能写成 12 + 12 。</li>\n</ul>\n<h2 id=\"解题思路\">解题思路<a title=\"#解题思路\" href=\"#解题思路\"></a></h2>\n<p>🤔 带着问题来思考：</p>\n<ol>\n<li>从题目中得知需要使用$+$、$-$、$*$、$/$ 和 $()$ 来进行计算，简单的计算我们直接算就行了，那如何用代码来表示括号的优先级呢？</li>\n<li>如何避免因为精度丢失产生的问题？</li>\n</ol>\n<p>💡 具体思路：</p>\n<p>有没有括号其实也就是意味着先计算和后计算的区别。如何理解呢？举个简单的例子👇</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 * 3 + 1</span><br><span class=\"line\">2 * (3 + 1)</span><br></pre></td></tr></table></figure>\n<p>😎 因此我们可以设计这样一个递归函数 <code>helper</code>，其中 <code>helper</code> 接收两个参数，分别为 <code>prev</code> 和 <code>index</code>，对于加法存在这两种结果：</p>\n<ul>\n<li><code>heper(prev + nums[i], index + 1)</code></li>\n<li><code>prev + helper(nums[i], index + 1)</code></li>\n</ul>\n<p>那么对于四种运算符来说就可以用代码来这样表达：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> temp = []</span><br><span class=\"line\">temp[<span class=\"number\">0</span>] = prev + helper(nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">temp[<span class=\"number\">1</span>] = helper(prev + nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">temp[<span class=\"number\">2</span>] = prev - helper(nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">temp[<span class=\"number\">3</span>] = helper(prev - nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">temp[<span class=\"number\">4</span>] = prev * helper(nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">temp[<span class=\"number\">5</span>] = helper(prev * nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">temp[<span class=\"number\">6</span>] = prev / helper(nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">temp[<span class=\"number\">7</span>] = helper(prev / nums[i], index + <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>🙋‍♂️ 当然，由于四种运算符会出现八种情况，对于计算结果，我们要用数组存储并返回。为了方便，我将上面的计算方法稍微改了一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">prev</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">index</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return <span class=\"type\">&#123;Array&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> helper = <span class=\"function\">(<span class=\"params\">prev, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === nums.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [prev]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (visited[i]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> temp = []</span><br><span class=\"line\">            visited[i] = <span class=\"literal\">true</span></span><br><span class=\"line\">            temp[<span class=\"number\">0</span>] = helper(nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">            temp[<span class=\"number\">1</span>] = helper(prev + nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">            temp[<span class=\"number\">2</span>] = helper(nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">            temp[<span class=\"number\">3</span>] = helper(prev - nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">            temp[<span class=\"number\">4</span>] = helper(nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">            temp[<span class=\"number\">5</span>] = helper(prev * nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">            temp[<span class=\"number\">6</span>] = helper(nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">            temp[<span class=\"number\">7</span>] = helper(prev / nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">            visited[i] = <span class=\"literal\">false</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; temp.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k = <span class=\"number\">0</span>; k &lt; temp[j].length; k++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span> (j) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                            temp[<span class=\"number\">0</span>][k] = prev + temp[<span class=\"number\">0</span>][k]</span><br><span class=\"line\">                            <span class=\"keyword\">break</span></span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                            temp[<span class=\"number\">2</span>][k] = prev - temp[<span class=\"number\">2</span>][k]</span><br><span class=\"line\">                            <span class=\"keyword\">break</span></span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">                            temp[<span class=\"number\">4</span>][k] = prev * temp[<span class=\"number\">4</span>][k]</span><br><span class=\"line\">                            <span class=\"keyword\">break</span></span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">                            temp[<span class=\"number\">6</span>][k] = prev / temp[<span class=\"number\">6</span>][k]</span><br><span class=\"line\">                            <span class=\"keyword\">break</span></span><br><span class=\"line\">                        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                res.push(...temp[j])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>最后还有一点就是上面提到的精度问题，我们可以用 <code>Math.abs(diff) &lt; 1e-6</code> 来判断～（<code>diff</code> 表示差值）。</p>\n<h2 id=\"代码\">代码<a title=\"#代码\" href=\"#代码\"></a></h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> judgePoint24 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">prev</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">index</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return <span class=\"type\">&#123;Array&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> helper = <span class=\"function\">(<span class=\"params\">prev, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === nums.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [prev]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (visited[i]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> temp = []</span><br><span class=\"line\">            visited[i] = <span class=\"literal\">true</span></span><br><span class=\"line\">            temp[<span class=\"number\">0</span>] = helper(nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">            temp[<span class=\"number\">1</span>] = helper(prev + nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">            temp[<span class=\"number\">2</span>] = helper(nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">            temp[<span class=\"number\">3</span>] = helper(prev - nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">            temp[<span class=\"number\">4</span>] = helper(nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">            temp[<span class=\"number\">5</span>] = helper(prev * nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">            temp[<span class=\"number\">6</span>] = helper(nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">            temp[<span class=\"number\">7</span>] = helper(prev / nums[i], index + <span class=\"number\">1</span>)</span><br><span class=\"line\">            visited[i] = <span class=\"literal\">false</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; temp.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k = <span class=\"number\">0</span>; k &lt; temp[j].length; k++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span> (j) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                            temp[<span class=\"number\">0</span>][k] = prev + temp[<span class=\"number\">0</span>][k]</span><br><span class=\"line\">                            <span class=\"keyword\">break</span></span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                            temp[<span class=\"number\">2</span>][k] = prev - temp[<span class=\"number\">2</span>][k]</span><br><span class=\"line\">                            <span class=\"keyword\">break</span></span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">                            temp[<span class=\"number\">4</span>][k] = prev * temp[<span class=\"number\">4</span>][k]</span><br><span class=\"line\">                            <span class=\"keyword\">break</span></span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">                            temp[<span class=\"number\">6</span>][k] = prev / temp[<span class=\"number\">6</span>][k]</span><br><span class=\"line\">                            <span class=\"keyword\">break</span></span><br><span class=\"line\">                        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                res.push(...temp[j])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> visited = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(nums.length).fill(<span class=\"literal\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        visited[i] = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> res = helper(nums[i], <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.some(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> <span class=\"built_in\">Math</span>.abs(<span class=\"number\">24</span> - num) &lt; <span class=\"number\">1e-6</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        visited[i] = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"1490.克隆N叉树","link":"2020/07/18/1490-克隆N叉树"},"next":{"title":"291.单词规律II","link":"2020/07/16/291.单词规律II"},"plink":"https://pigpigever.github.io/2020/07/16/679.24点游戏/","toc":[{"id":"题目","title":"题目","index":"1"},{"id":"解题思路","title":"解题思路","index":"2"},{"id":"代码","title":"代码","index":"3"}]}