{"per_page":10,"total":3,"current":2,"data":[{"title":"剑指Offer06.从尾到头打印链表","date":"2020-07-28T14:24:42.000Z","date_formatted":{"ll":"Jul 28, 2020","L":"07/28/2020","MM-DD":"07-28"},"thumbnail":"/images/thumbnail/8.jpg","excerpt":"输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。","link":"2020/07/28/剑指Offer06-从尾到头打印链表","tags":["LeetCode","剑指offer","算法"],"categories":["剑指offer"]},{"title":"剑指Offer03.数组中重复的数字","date":"2020-07-28T13:40:08.000Z","date_formatted":{"ll":"Jul 28, 2020","L":"07/28/2020","MM-DD":"07-28"},"thumbnail":"/images/thumbnail/8.jpg","excerpt":"找出数组中重复的数字。","link":"2020/07/28/剑指Offer03-数组中重复的数字","tags":["LeetCode","剑指offer","哈希表","算法"],"categories":["剑指offer"]},{"title":"剑指Offer31.栈的压入、弹出序列","date":"2020-07-28T11:18:37.000Z","date_formatted":{"ll":"Jul 28, 2020","L":"07/28/2020","MM-DD":"07-28"},"thumbnail":"/images/thumbnail/8.jpg","excerpt":"输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。","link":"2020/07/28/剑指Offer31-栈的压入、弹出序列","tags":["LeetCode","剑指offer","数据结构","栈","算法"],"categories":["剑指offer"]},{"title":"数据结构与算法之Trie树","date":"2020-07-24T15:13:27.000Z","date_formatted":{"ll":"Jul 24, 2020","L":"07/24/2020","MM-DD":"07-24"},"thumbnail":"/images/thumbnail/3.jpg","excerpt":"Trie 树又称为「字典树」，为了与 Tree 区分开来，通常将 Trie 树读作 Try 树，《算法4》上又将这种数据结构称作「单词查找树」。 简单来说，Trie 树适用于字符串的前缀匹配，其前缀匹配的时间复杂度为 $O(m)$，``m`` 为键长。所以特别是当数据量特别大的时候，Trie 树的优势就比较明显。","link":"2020/07/24/数据结构与算法之Trie树","tags":["数据结构","算法"],"categories":["数据结构"]},{"title":"1490.克隆N叉树","date":"2020-07-18T14:04:14.000Z","date_formatted":{"ll":"Jul 18, 2020","L":"07/18/2020","MM-DD":"07-18"},"thumbnail":"/images/thumbnail/7.jpg","excerpt":"给定一棵 N 叉树的根节点 ``root``，返回该树的深拷贝（克隆）。","link":"2020/07/18/1490-克隆N叉树","tags":["LeetCode","数据结构","树","深度优先搜索","算法"]},{"title":"679. 24 点游戏","date":"2020-07-16T15:41:52.000Z","date_formatted":{"ll":"Jul 16, 2020","L":"07/16/2020","MM-DD":"07-16"},"thumbnail":"/images/thumbnail/7.jpg","excerpt":"你有 4 张写有 1 到 9 数字的牌。你需要判断是否能通过 *，/，+，-，(，) 的运算得到 24。","link":"2020/07/16/679.24点游戏","tags":["LeetCode","回溯算法","算法"],"categories":["LeetCode"]},{"title":"291.单词规律II","date":"2020-07-15T16:48:25.000Z","date_formatted":{"ll":"Jul 16, 2020","L":"07/16/2020","MM-DD":"07-16"},"thumbnail":"/images/thumbnail/7.jpg","excerpt":"给你一种规律 pattern 和一个字符串 str，请你判断 str 是否遵循其相同的规律。 这里我们指的是 完全遵循，例如 pattern 里的每个字母和字符串 str 中每个 非空 单词之间，存在着双向连接的对应规律。","link":"2020/07/16/291.单词规律II","tags":["LeetCode","回溯算法","算法"],"categories":["LeetCode"]},{"title":"209. 长度最小的子数组","date":"2020-07-13T16:00:00.000Z","date_formatted":{"ll":"Jul 14, 2020","L":"07/14/2020","MM-DD":"07-14"},"thumbnail":"/images/thumbnail/7.jpg","excerpt":"给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。","link":"2020/07/14/209.长度最小的子数组","tags":["LeetCode","滑动窗口","算法"],"categories":["LeetCode"]},{"title":"1219. 黄金矿工","date":"2020-07-13T16:00:00.000Z","date_formatted":{"ll":"Jul 14, 2020","L":"07/14/2020","MM-DD":"07-14"},"thumbnail":"/images/thumbnail/7.jpg","excerpt":"你要开发一座金矿，地质勘测学家已经探明了这座金矿中的资源分布，并用大小为 m * n 的网格 grid 进行了标注。每个单元格中的整数就表示这一单元格中的黄金数量；如果该单元格是空的，那么就是 0。","link":"2020/07/14/1219.黄金矿工","tags":["LeetCode","算法","递归"],"categories":["LeetCode"]},{"title":"盘点那些常见的 JS 数组方法及 Polyfill","date":"2020-07-10T16:00:00.000Z","date_formatted":{"ll":"Jul 11, 2020","L":"07/11/2020","MM-DD":"07-11"},"thumbnail":"/images/thumbnail/JS-API.jpeg","excerpt":"虽然有时候遍历数组只需要 ``for`` 循环则足矣，但是如果 API 利用得当，往往能更大程度的提高代码的可读性，减少心智负担～","link":"2020/07/11/一文盘点那些常见的JS数组方法及Polyfill"}]}