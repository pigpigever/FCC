{"title":"剑指Offer31.栈的压入、弹出序列","date":"2020-07-28T11:18:37.000Z","date_formatted":{"ll":"Jul 28, 2020","L":"07/28/2020","MM-DD":"07-28"},"thumbnail":"/images/thumbnail/1.jpeg","link":"2020/07/28/剑指Offer31-栈的压入、弹出序列","tags":["LeetCode","剑指offer","数据结构","栈","算法"],"updated":"2020-08-10T13:05:56.011Z","content":"<h2 id=\"题目\">题目<a title=\"#题目\" href=\"#题目\"></a></h2>\n<p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。</p>\n<p>示例 1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：pushed &#x3D; [1,2,3,4,5], popped &#x3D; [4,5,3,2,1]</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：我们可以按以下顺序执行：</span><br><span class=\"line\">push(1), push(2), push(3), push(4), pop() -&gt; 4,</span><br><span class=\"line\">push(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：pushed &#x3D; [1,2,3,4,5], popped &#x3D; [4,3,5,1,2]</span><br><span class=\"line\">输出：false</span><br><span class=\"line\">解释：1 不能在 2 之前弹出。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>0 &lt;= pushed.length == popped.length &lt;= 1000</li>\n<li>0 &lt;= pushed[i], popped[i] &lt; 1000</li>\n<li>pushed 是 popped 的排列。</li>\n</ul>\n<h2 id=\"解题思路\">解题思路<a title=\"#解题思路\" href=\"#解题思路\"></a></h2>\n<ul>\n<li>增加一个 <code>stack</code> 模拟 <code>push</code> 的过程。</li>\n<li><code>stack</code> 的「压入栈顶」和 <code>pop</code> 的「弹出栈顶」 匹配时，将两者都弹出。</li>\n<li>如果「栈」中的元素都已遍历完，但是 <code>stack</code> 中仍然不为空，那么说明「压入序列」和「弹出序列」不能完全匹配上，返回 <code>false</code>。</li>\n<li>如果「栈」中的元素都已遍历完，且 <code>stack</code> 为空，说明「压入序列」和「弹出序列」完全匹配，返回 <code>true</code>。</li>\n</ul>\n<h2 id=\"代码\">代码<a title=\"#代码\" href=\"#代码\"></a></h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">pushed</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">popped</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> validateStackSequences = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pushed, popped</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!pushed.length &amp;&amp; !popped.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!pushed.length || !popped.length || pushed.length !== popped.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stack = [pushed[<span class=\"number\">0</span>]]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (stack.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (stack.length &amp;&amp; stack[<span class=\"number\">0</span>] === popped[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">            stack.shift()</span><br><span class=\"line\">            popped.shift()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; pushed.length) &#123;</span><br><span class=\"line\">            stack.unshift(pushed[i++])</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stack.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"剑指Offer03.数组中重复的数字","link":"2020/07/28/剑指Offer03-数组中重复的数字"},"next":{"title":"数据结构与算法之Trie树","link":"2020/07/24/数据结构与算法之Trie树"},"plink":"https://pigpigever.github.io/2020/07/28/剑指Offer31-栈的压入、弹出序列/","toc":[{"id":"题目","title":"题目","index":"1"},{"id":"解题思路","title":"解题思路","index":"2"},{"id":"代码","title":"代码","index":"3"}]}