{"title":"深入理解 axios","date":"2020-08-04T09:02:16.000Z","date_formatted":{"ll":"Aug 4, 2020","L":"08/04/2020","MM-DD":"08-04"},"thumbnail":"/images/thumbnail/5.jpg","link":"2020/08/04/axios源码分析","tags":["源码","阅读"],"updated":"2020-08-12T09:59:05.080Z","content":"<h1 id=\"axios-是什么\">axios 是什么<a title=\"#axios-是什么\" href=\"#axios-是什么\"></a></h1>\n<p><code>axios</code> 是基于 <code>Promise</code> 并用于浏览器和 <code>node.js</code> 的 <code>HTTP</code> 请求库。</p>\n<h1 id=\"axios-的常见功能\">axios 的常见功能<a title=\"#axios-的常见功能\" href=\"#axios-的常见功能\"></a></h1>\n<ul>\n<li>支持请求、响应拦截</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Add a request interceptor</span></span><br><span class=\"line\">axios.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something before request is sent</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something with request error</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add a response interceptor</span></span><br><span class=\"line\">axios.interceptors.response.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Any status code that lie within the range of 2xx cause this function to trigger</span></span><br><span class=\"line\">    <span class=\"comment\">// Do something with response data</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Any status codes that falls outside the range of 2xx cause this function to trigger</span></span><br><span class=\"line\">    <span class=\"comment\">// Do something with response error</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>取消请求</li>\n</ul>\n<ol>\n<li>通过 <code>CancelToken.source</code> 这个工厂函数来获取 <code>cancel</code> 函数。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> CancelToken = axios.CancelToken;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source = CancelToken.source();</span><br><span class=\"line\"></span><br><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>, &#123;</span><br><span class=\"line\">  cancelToken: source.token</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">thrown</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (axios.isCancel(thrown)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request canceled'</span>, thrown.message);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle error</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">axios.post(<span class=\"string\">'/user/12345'</span>, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'new name'</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  cancelToken: source.token</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cancel the request (the message parameter is optional)</span></span><br><span class=\"line\">source.cancel(<span class=\"string\">'Operation canceled by the user.'</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>通过 <code>CancelToken</code> 的构造函数来获取 <code>cancel</code> 函数。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> CancelToken = axios.CancelToken;</span><br><span class=\"line\"><span class=\"keyword\">let</span> cancel;</span><br><span class=\"line\"></span><br><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>, &#123;</span><br><span class=\"line\">  cancelToken: <span class=\"keyword\">new</span> CancelToken(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executor</span>(<span class=\"params\">c</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// An executor function receives a cancel function as a parameter</span></span><br><span class=\"line\">    cancel = c;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cancel the request</span></span><br><span class=\"line\">cancel();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>预防 <code>XSRF</code></li>\n</ul>\n<p>可以通过设置 <code>XSRF token</code> 来预防 <code>XSRF/CSRF</code>。</p>\n<ul>\n<li>支持 <code>Promise API</code></li>\n<li>获取上传、下载进度</li>\n</ul>\n<h1 id=\"axios-源码分析\">axios 源码分析<a title=\"#axios-源码分析\" href=\"#axios-源码分析\"></a></h1>\n<h2 id=\"目录\">目录<a title=\"#目录\" href=\"#目录\"></a></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── adapters</span><br><span class=\"line\">│   ├── README.md</span><br><span class=\"line\">│   ├── http.js</span><br><span class=\"line\">│   └── xhr.js</span><br><span class=\"line\">├── axios.js</span><br><span class=\"line\">├── cancel</span><br><span class=\"line\">│   ├── Cancel.js</span><br><span class=\"line\">│   ├── CancelToken.js</span><br><span class=\"line\">│   └── isCancel.js</span><br><span class=\"line\">├── core</span><br><span class=\"line\">│   ├── Axios.js</span><br><span class=\"line\">│   ├── InterceptorManager.js</span><br><span class=\"line\">│   ├── README.md</span><br><span class=\"line\">│   ├── buildFullPath.js</span><br><span class=\"line\">│   ├── createError.js</span><br><span class=\"line\">│   ├── dispatchRequest.js</span><br><span class=\"line\">│   ├── enhanceError.js</span><br><span class=\"line\">│   ├── mergeConfig.js</span><br><span class=\"line\">│   ├── settle.js</span><br><span class=\"line\">│   └── transformData.js</span><br><span class=\"line\">├── defaults.js</span><br><span class=\"line\">├── helpers</span><br><span class=\"line\">│   ├── README.md</span><br><span class=\"line\">│   ├── bind.js</span><br><span class=\"line\">│   ├── buildURL.js</span><br><span class=\"line\">│   ├── combineURLs.js</span><br><span class=\"line\">│   ├── cookies.js</span><br><span class=\"line\">│   ├── deprecatedMethod.js</span><br><span class=\"line\">│   ├── isAbsoluteURL.js</span><br><span class=\"line\">│   ├── isURLSameOrigin.js</span><br><span class=\"line\">│   ├── normalizeHeaderName.js</span><br><span class=\"line\">│   ├── parseHeaders.js</span><br><span class=\"line\">│   └── spread.js</span><br><span class=\"line\">└── utils.js</span><br></pre></td></tr></table></figure>\n<h2 id=\"核心功能\">核心功能<a title=\"#核心功能\" href=\"#核心功能\"></a></h2>\n<h3 id=\"axios-构造函数\">Axios 构造函数<a title=\"#axios-构造函数\" href=\"#axios-构造函数\"></a></h3>\n<p>一般来说，构造函数起到一个初始化内部对象的作用，当然 <code>axios</code> 也不例外👇</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create a new instance of Axios</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Object&#125;</span> </span>instanceConfig The default config for the instance</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Axios</span>(<span class=\"params\">instanceConfig</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.defaults = instanceConfig;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.interceptors = &#123;</span><br><span class=\"line\">    request: <span class=\"keyword\">new</span> InterceptorManager(),</span><br><span class=\"line\">    response: <span class=\"keyword\">new</span> InterceptorManager()</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"axios.prototype.request\">Axios.prototype.request<a title=\"#axios.prototype.request\" href=\"#axios.prototype.request\"></a></h3>\n<p>这个函数一共做了这些事情：</p>\n<ol>\n<li>合并配置</li>\n<li>设置请求方法（也可以归到上一步）</li>\n<li>绑定拦截器并生成 <code>promise</code> 队列</li>\n<li>执行 <code>promise</code> 队列</li>\n<li>返回执行结果</li>\n</ol>\n<p>可以说，理解了这段描述，就能理清 <code>axios</code> 大致的流程了。下面是具体的代码👇</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Dispatch a request</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Object&#125;</span> </span>config The config specific for this request (merged with this.defaults)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Axios.prototype.request = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/*eslint no-param-reassign:0*/</span></span><br><span class=\"line\">  <span class=\"comment\">// Allow for axios('example/url'[, config]) a la fetch API</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> config === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">    config = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] || &#123;&#125;;</span><br><span class=\"line\">    config.url = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    config = config || &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  config = mergeConfig(<span class=\"keyword\">this</span>.defaults, config);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Set config.method</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (config.method) &#123;</span><br><span class=\"line\">    config.method = config.method.toLowerCase();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.defaults.method) &#123;</span><br><span class=\"line\">    config.method = <span class=\"keyword\">this</span>.defaults.method.toLowerCase();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    config.method = <span class=\"string\">'get'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Hook up interceptors middleware</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> chain = [dispatchRequest, <span class=\"literal\">undefined</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> promise = <span class=\"built_in\">Promise</span>.resolve(config);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.interceptors.request.forEach(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unshiftRequestInterceptors</span>(<span class=\"params\">interceptor</span>) </span>&#123;</span><br><span class=\"line\">    chain.unshift(interceptor.fulfilled, interceptor.rejected);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.interceptors.response.forEach(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pushResponseInterceptors</span>(<span class=\"params\">interceptor</span>) </span>&#123;</span><br><span class=\"line\">    chain.push(interceptor.fulfilled, interceptor.rejected);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (chain.length) &#123;</span><br><span class=\"line\">    promise = promise.then(chain.shift(), chain.shift());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>可以看出，「拦截器」这个功能，无非是将「拦截器」和实际的请求拼成一个队列，最后 <code>axios</code> 抛出的 <code>promise</code> 对象其实就是队列中最后一个任务执行之后返回的结果。</p>\n<p><img src=\"/images/axios/axios.jpg\" alt=\"\" class=\"φcx\"></p>\n<h3 id=\"绑定请求方法\">绑定请求方法<a title=\"#绑定请求方法\" href=\"#绑定请求方法\"></a></h3>\n<p>在 <code>axios</code> 中请求方法分两种：</p>\n<ul>\n<li>不需要填入请求参数</li>\n<li>需要填入请求参数</li>\n</ul>\n<p>源码中分两步将这些请求方法挂载到 <code>prototype</code> 上👇</p>\n<ol>\n<li>挂载 <code>delete/get/head/options</code> 方法。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">utils.forEach([<span class=\"string\">'delete'</span>, <span class=\"string\">'get'</span>, <span class=\"string\">'head'</span>, <span class=\"string\">'options'</span>], <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forEachMethodNoData</span>(<span class=\"params\">method</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/*eslint func-names:0*/</span></span><br><span class=\"line\">  Axios.prototype[method] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url, config</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.request(mergeConfig(config || &#123;&#125;, &#123;</span><br><span class=\"line\">      method: method,</span><br><span class=\"line\">      url: url</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>挂载 <code>post/put/patch</code> 方法。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">utils.forEach([<span class=\"string\">'post'</span>, <span class=\"string\">'put'</span>, <span class=\"string\">'patch'</span>], <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forEachMethodWithData</span>(<span class=\"params\">method</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/*eslint func-names:0*/</span></span><br><span class=\"line\">  Axios.prototype[method] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url, data, config</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.request(mergeConfig(config || &#123;&#125;, &#123;</span><br><span class=\"line\">      method: method,</span><br><span class=\"line\">      url: url,</span><br><span class=\"line\">      data: data</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"interceptormanager\">InterceptorManager<a title=\"#interceptormanager\" href=\"#interceptormanager\"></a></h2>\n<p><code>Axios</code> 封装了 <code>InterceptorManager</code>，用来管理注册的拦截器。</p>\n<h3 id=\"构造函数\">构造函数<a title=\"#构造函数\" href=\"#构造函数\"></a></h3>\n<p>构造函数里只声明了一个数组 <code>handlers</code>，用来保存拦截器的回调。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">InterceptorManager</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.handlers = [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"interceptormanager.prototype.use\">InterceptorManager.prototype.use<a title=\"#interceptormanager.prototype.use\" href=\"#interceptormanager.prototype.use\"></a></h3>\n<p><code>InterceptorManager.prototype.use</code> 主要将拦截器存入 <code>handlers</code>，调用之后返回 <code>this.handler.length - 1</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InterceptorManager.prototype.use = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">use</span>(<span class=\"params\">fulfilled, rejected</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.handlers.push(&#123;</span><br><span class=\"line\">    fulfilled: fulfilled,</span><br><span class=\"line\">    rejected: rejected</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.handlers.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"interceptormanager.prototype.eject\">InterceptorManager.prototype.eject<a title=\"#interceptormanager.prototype.eject\" href=\"#interceptormanager.prototype.eject\"></a></h3>\n<p><code>InterceptorManager.prototype.eject</code> 主要将指定的拦截器从 <code>handlers</code> 中移除。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InterceptorManager.prototype.eject = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eject</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.handlers[id]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handlers[id] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"interceptormanager.prototype.foreach\">InterceptorManager.prototype.forEach<a title=\"#interceptormanager.prototype.foreach\" href=\"#interceptormanager.prototype.foreach\"></a></h3>\n<p><code>InterceptorManager.prototype.forEach</code> 需要传入一个参数 <code>fn</code>，之后会遍历 <code>handlers</code> 并以 <code>handlers</code> 中的拦截器 <code>h</code> 为参数，挨个执行 <code>fn(h)</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InterceptorManager.prototype.forEach = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forEach</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  utils.forEach(<span class=\"keyword\">this</span>.handlers, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forEachHandler</span>(<span class=\"params\">h</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (h !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      fn(h);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"小结\">小结<a title=\"#小结\" href=\"#小结\"></a></h3>\n<p><img src=\"/images/axios/InterceptorManage.png\" alt=\"\" class=\"φcx\"></p>\n<h2 id=\"canceltoken\">CancelToken<a title=\"#canceltoken\" href=\"#canceltoken\"></a></h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A `CancelToken` is an object that can be used to request cancellation of an operation.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@class</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Function&#125;</span> </span>executor The executor function.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CancelToken</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> executor !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'executor must be a function.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> resolvePromise;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">promiseExecutor</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    resolvePromise = resolve;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> token = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  executor(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cancel</span>(<span class=\"params\">message</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token.reason) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Cancellation has already been requested</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    token.reason = <span class=\"keyword\">new</span> Cancel(message);</span><br><span class=\"line\">    resolvePromise(token.reason);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码并不难懂，主要实现这些功能：</p>\n<ul>\n<li>执行传入 <code>CancelToken</code> 的参数 <code>executor</code></li>\n<li>挂载一个 <code>promise</code> 并在 <code>executor</code> 执行之后 <code>resolvePromise</code>，换句话说，可以通过 <code>this.promise</code> 来获取 <code>executor</code> 的执行结果。</li>\n</ul>\n<p>不过，眼尖的同学可以看到代码中出现了 <code>Cancel</code> 这个构造函数，它又有什么作用呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A `Cancel` is an object that is thrown when an operation is canceled.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@class</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string=&#125;</span> </span>message The message.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cancel</span>(<span class=\"params\">message</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Cancel.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toString</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'Cancel'</span> + (<span class=\"keyword\">this</span>.message ? <span class=\"string\">': '</span> + <span class=\"keyword\">this</span>.message : <span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Cancel.prototype.__CANCEL__ = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<p>OK，其实 <code>Cancel</code> 不过是用来存放 <code>message</code>，它就是个「工具人」🐶</p>\n<h3 id=\"canceltoken.source\">CancelToken.source<a title=\"#canceltoken.source\" href=\"#canceltoken.source\"></a></h3>\n<p>当然，<code>axios</code> 还提供了另外一个方法。可以看到 <code>CancelToken</code> 上挂载了一个 <code>source</code> 函数，同样它也可以用来获取 <code>token</code> 并取消请求。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns an object that contains a new `CancelToken` and a function that, when called,</span></span><br><span class=\"line\"><span class=\"comment\"> * cancels the `CancelToken`.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">CancelToken.source = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">source</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cancel;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> token = <span class=\"keyword\">new</span> CancelToken(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executor</span>(<span class=\"params\">c</span>) </span>&#123;</span><br><span class=\"line\">    cancel = c;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    token: token,</span><br><span class=\"line\">    cancel: cancel</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"canceltoken.prototype.throwifrequested\">CancelToken.prototype.throwIfRequested<a title=\"#canceltoken.prototype.throwifrequested\" href=\"#canceltoken.prototype.throwifrequested\"></a></h3>\n<p>请求取消时，就可以利用 <code>throwIfRequested</code> 来抛出取消的 <code>reason</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Throws a `Cancel` if cancellation has been requested.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">CancelToken.prototype.throwIfRequested = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throwIfRequested</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.reason) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">this</span>.reason;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"小结-1\">小结<a title=\"#小结-1\" href=\"#小结-1\"></a></h3>\n<p><img src=\"/images/axios/cancel.png\" alt=\"\" class=\"φcx\"></p>\n<h1 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h1>\n<h1 id=\"参考资料\">参考资料<a title=\"#参考资料\" href=\"#参考资料\"></a></h1>\n<ul>\n<li><a href=\"https://github.com/axios/axios\" target=\"_blank\">axios 文档</a></li>\n</ul>\n","prev":{"title":"剑指 Offer 04. 二维数组中的查找","link":"2020/08/10/剑指Offer04-二维数组中的查找"},"next":{"title":"121.买卖股票的最佳时机","link":"2020/08/03/121-买卖股票的最佳时机"},"plink":"https://pigpigever.github.io/2020/08/04/axios源码分析/","toc":[{"id":"axios-是什么","title":"axios 是什么","index":"1"},{"id":"axios-的常见功能","title":"axios 的常见功能","index":"2"},{"id":"axios-源码分析","title":"axios 源码分析","index":"3","children":[{"id":"目录","title":"目录","index":"3.1"},{"id":"核心功能","title":"核心功能","index":"3.2","children":[{"id":"axios-构造函数","title":"Axios 构造函数","index":"3.2.1"},{"id":"axios.prototype.request","title":"Axios.prototype.request","index":"3.2.2"},{"id":"绑定请求方法","title":"绑定请求方法","index":"3.2.3"}]},{"id":"interceptormanager","title":"InterceptorManager","index":"3.3","children":[{"id":"构造函数","title":"构造函数","index":"3.3.1"},{"id":"interceptormanager.prototype.use","title":"InterceptorManager.prototype.use","index":"3.3.2"},{"id":"interceptormanager.prototype.eject","title":"InterceptorManager.prototype.eject","index":"3.3.3"},{"id":"interceptormanager.prototype.foreach","title":"InterceptorManager.prototype.forEach","index":"3.3.4"},{"id":"小结","title":"小结","index":"3.3.5"}]},{"id":"canceltoken","title":"CancelToken","index":"3.4","children":[{"id":"canceltoken.source","title":"CancelToken.source","index":"3.4.1"},{"id":"canceltoken.prototype.throwifrequested","title":"CancelToken.prototype.throwIfRequested","index":"3.4.2"},{"id":"小结-1","title":"小结","index":"3.4.3"}]}]},{"id":"总结","title":"总结","index":"4"},{"id":"参考资料","title":"参考资料","index":"5"}]}